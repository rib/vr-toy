# android.m4 - Macros to locate and utilise Android NDK modules
#
# Copyright Â© 2012 Intel Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# As a special exception to the GNU General Public License, if you
# distribute this file as part of a program that contains a
# configuration script generated by Autoconf, you may include it under
# the same distribution terms that you use for the rest of that program.

# ANDROID_PROG_NDK_BUILD()
# ------------------------
# Ensures that ndk-build is available
AC_DEFUN([ANDROID_PROG_NDK_BUILD],
[AC_ARG_VAR([NDK_BUILD], [path to ndk-build utility])
if test "x$ac_cv_env_NDK_BUILD_set" != "xset"; then
	AC_PATH_PROG([NDK_BUILD], [ndk-build])
fi
])

# ANDROID_CHECK_MODULE([PREFIX], [MODULE_FILENAME], [MODULE_NAME])
# -----------------------------------------------------------------
# Checks whether the module named MODULE_NAME located in the Android
# import Makefile named [MODULE_FILENAME] is available. If so it will
# set PREFIX_CFLAGS to the cflags required to use headers from the
# module. Otherwise it will report an error.
AC_DEFUN([ANDROID_CHECK_MODULE],
[AC_REQUIRE([ANDROID_PROG_NDK_BUILD])dnl
AC_MSG_CHECKING([checking for the android module $3])
tmpdir=`mktemp -d`
mkdir "$tmpdir/jni"
cat > "$tmpdir/jni/Android.mk" <<EOS
include \$(CLEAR_VARS)
LOCAL_MODULE := tmpmodule
LOCAL_STATIC_LIBRARIES := $3

include \$(BUILD_STATIC_LIBRARY)

getcflags :
	@echo \$(patsubst %,-I%,\$(LOCAL_C_INCLUDES)) \$(LOCAL_CFLAGS)

\$(call import-module,$2)
EOS
cflags=`$NDK_BUILD -s -C "\$tmpdir" getcflags`
result="$?"
rm -rf "$tmpdir"

AS_IF([test "x$result" = "x0"],
      [AC_MSG_RESULT([yes])],
      [AC_MSG_RESULT([no])
       AC_MSG_ERROR([Could not find module $3 x$result])])

$1[]_CFLAGS="$cflags"
])
