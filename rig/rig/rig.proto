package rig;

message Query
{
  required int32 a=1;
}

message TestResult
{
  required int32 a=1;
}

message Color
{
  optional string hex=1;
}

message Device
{
  enum Type { PHONE=1; TABLET=2; ULTRABOOK=3; }
  optional Type type=4;

  optional int32 width=1; //deprecated - real size comes from the hardware
  optional int32 height=2; //deprecated

  optional Color background=3;
}

message Buffer
{
  optional sint64 id=1;
  required int32 size=2;
  optional bytes data=3;
}

message Attribute
{
  enum Type { BYTE=1; UNSIGNED_BYTE=2; SHORT=3; UNSIGNED_SHORT=4; FLOAT=5; }

  optional string name=2;
  optional bool normalized=3;
  optional uint32 instance_stride=11;

  //buffered
  optional sint64 buffer_id=1;
  optional uint32 stride=4;
  optional uint32 offset=5;
  optional uint32 n_components=6;
  optional Type type=7;

  //constant
  optional uint32 n_columns=8;
  optional bool transpose=9;
  repeated float floats=10;
}

message Mesh
{
  enum Mode { POINTS=1; LINES=2; LINE_LOOP=3; LINE_STRIP=4; TRIANGLES=5; TRIANGLE_STRIP=6; TRIANGLE_FAN=7; }

  optional Mode mode=1;

  repeated Buffer buffers=2;

  repeated Attribute attributes=3;
  optional uint32 n_vertices=4;

  enum IndicesType { UNSIGNED_BYTE=1; UNSIGNED_SHORT=2; UNSIGNED_INT=3; }

  optional IndicesType indices_type=5;
  optional uint32 n_indices=6;
  optional sint64 indices_buffer_id=7;
}

message Asset
{
  optional sint64 id=1; //XXX ID

  optional string path=2;
  optional string mime_type=9;

  optional uint32 type=3;
  optional bytes data=4;
  optional bool is_video=5;//TODO remove

  //Sometimes we skip serializing the real data of an asset
  //but still need to know some meta data about it...
  optional int32 width=7;
  optional int32 height=8;

  optional Mesh mesh=6;
}

message Vec3
{
  required float x=1;
  required float y=2;
  required float z=3;
}

message Vec4
{
  required float x=1;
  required float y=2;
  required float z=3;
  required float w=4;
}

message Rotation
{
  required float angle=1;
  required float x=2;
  required float y=3;
  required float z=4;
}

message Viewport
{
  required float x=1;
  required float y=2;
  required float width=3;
  required float height=4;
}

message OrthoCoords
{
  required float x0=1;
  required float y0=2;
  required float x1=3;
  required float y1=4;
}

message AsymmetricPerspective
{
  required float left_field_of_view=1;
  required float right_field_of_view=2;
  required float bottom_field_of_view=3;
  required float top_field_of_view=4;
}

enum PropertyType { FLOAT=1;
                    DOUBLE=2;
                    INTEGER=3;
                    ENUM=4;
                    UINT32=5;
                    BOOLEAN=6;
                    OBJECT=7;
                    POINTER=8;
                    QUATERNION=9;
                    COLOR=10;
                    VEC3=11;
                    VEC4=12;
                    TEXT=13;
                    ASSET=14; }

message PropertyValue
{
  optional float float_value=2;
  optional double double_value=3;
  optional sint32 integer_value=4;
  optional int32 enum_value=5;
  optional int32 uint32_value=6;
  optional bool boolean_value=7;
  optional sint64 object_value=8; //XXX ID
  //XXX: we never expect to serialize a pointer
  optional Rotation quaternion_value=9;
  optional Color color_value=10;
  optional Vec3 vec3_value=12;
  optional Vec4 vec4_value=13;

  optional string text_value=14;
}

message Boxed
{
  optional string name=1;
  optional PropertyType type=2;
  optional PropertyValue value=3;
}

message Entity
{
  message Component
    {
      enum Type { LIGHT=1; MATERIAL=2; MESH=5;
          TEXT=6; CAMERA=7; NINE_SLICE=9;
          BUTTON_INPUT=11; NATIVE_MODULE=12; SOURCE=13; }

      optional sint64 id=1; //XXX ID

      optional Type type=2;

      optional Mesh mesh=3;

      repeated Boxed properties=4;
    }

  optional sint64 id=1; //XXX ID

  optional sint64 parent_id=2; //XXX ID
  optional string label=3;
  optional Vec3 position=4;
  optional float scale=5;
  optional Rotation rotation=6;

  repeated Component components=8;
}

message SimpleObject
{
  optional sint64 id=1;
  //introspectable properties...
  repeated Boxed properties=2;
}

message Constant
{
  optional PropertyValue value=1;
}

message Node
{
  optional float t=1;
  optional PropertyValue value=2;
}

message Path
{
  repeated Node nodes=2;
}

message Controller
{
  message Property
    {
      enum Method { CONSTANT=1; PATH=2; C_BINDING=3; }

      optional sint64 object_id=1; //XXX ID
      optional string name=3;

      optional Method method=7;

      //Animated properties have key values tracked in a path
      optional PropertyType type=4;
      optional Path path=5;
      optional PropertyValue constant=6;

      message Dependency
        {
          optional sint64 object_id=1; //XXX ID
          optional string name=2;
        }

      //Binding properties instead have a list of dependency
      //properties and a C expression to evaluate whenever
      //one of those dependencies changes
      repeated Dependency dependencies=8;
      optional string c_expression=9;
      optional int32 binding_id=10;
    }

  optional sint64 id=1; //XXX ID

  optional string name=3;
  repeated Property properties=2;

  //introspectable properties...
  repeated Boxed controller_properties=4;
}

message UI
{
  enum Mode { EDIT=1; PLAY=2; }
  optional Mode mode=5;

  optional Device device=1;

  repeated Entity entities=3;

  repeated SimpleObject views=8;

  repeated Controller controllers=4;

  repeated Buffer buffers=9;

  optional bytes dso=6;
}

message Event
{
  enum Type { POINTER_MOVE=1; POINTER_DOWN=2; POINTER_UP=3;
              KEY_UP=4; KEY_DOWN=5; }

  message PointerMove
    {
      optional float x=1;
      optional float y=2;
      optional sint32 mod_state=3;
    }
  message PointerButton
    {
      optional uint32 button=1;
      repeated bool buttons=2;
      optional sint32 mod_state=3;
    }
  message Key
    {
      optional sint32 keysym=1;
      optional sint32 mod_state=2;
    }

  optional Type type=1;
  optional sfixed64 timestamp=2;
  optional PointerMove pointer_move=3;
  optional PointerButton pointer_button=4;
  optional Key key=5;
  optional sint64 camera_id=6; //XXX ID
}

message Operation
{
  //See RigEngineOpType
  required uint32 type=1;
  optional uint32 sequence=2;
  repeated string backtrace_frames=20;

  //Change an object property, not associated with a controller
  message SetProperty
  {
    required sint64 object_id=1; //XXX ID
    required int32 property_id=2;
    required PropertyValue value=3;
  }
  optional SetProperty set_property=3;

  //Add a new entity to the scene
  message AddEntity
  {
    required sint64 parent_entity_id=1; //XXX ID
    required Entity entity=2;
  }
  optional AddEntity add_entity=4;

  //Remove an entity from the scene
  message DeleteEntity
  {
    required sint64 entity_id=1; //XXX ID
  }
  optional DeleteEntity delete_entity=5;

  message RegisterComponent
  {
    required Entity.Component component=1;
  }
  optional RegisterComponent register_component=17;

  //Add a component to an entity
  message AddComponent
  {
    required sint64 parent_entity_id=1; //XXX ID
    required sint64 component_id=2; //XXX ID
  }
  optional AddComponent add_component=6;

  message DeleteComponent
  {
    required sint64 component_id=1; //XXX ID
  }
  optional DeleteComponent delete_component=7;

  message AddController
  {
    required Controller controller=1;
  }
  optional AddController add_controller=8;

  message DeleteController
  {
    required sint64 controller_id=1; //XXX ID
  }
  optional DeleteController delete_controller=9;

  //Change the constant associated with a controller property
  message ControllerSetConst
  {
    required sint64 controller_id=1; //XXX ID
    required sint64 object_id=2; //XXX ID
    required int32 property_id=3;
    required PropertyValue value=4;
  }
  optional ControllerSetConst controller_set_const=10;

  //Add a new controller property path node / key frame
  message ControllerPathAddNode
  {
    required sint64 controller_id=1; //XXX ID
    required sint64 object_id=2; //XXX ID
    required int32 property_id=3;
    required float t=4;
    required PropertyValue value=5;
  }
  optional ControllerPathAddNode controller_path_add_node=11;

  //Remove a node / key frame from a controller property path
  message ControllerPathDeleteNode
  {
    required sint64 controller_id=1; //XXX ID
    required sint64 object_id=2; //XXX ID
    required int32 property_id=3;
    required float t=4;
  }
  optional ControllerPathDeleteNode controller_path_delete_node=12;

  //Change the value of a controller property path node / key frame
  message ControllerPathSetNode
  {
    required sint64 controller_id=1; //XXX ID
    required sint64 object_id=2; //XXX ID
    required int32 property_id=3;
    required float t=4;
    required PropertyValue value=5;
  }
  optional ControllerPathSetNode controller_path_set_node=13;

  //Associate a property with a controller
  message ControllerAddProperty
  {
    required sint64 controller_id=1; //XXX ID
    required sint64 object_id=2; //XXX ID
    required int32 property_id=3;
  }
  optional ControllerAddProperty controller_add_property=14;

  //Disassociate a property from a controller
  message ControllerRemoveProperty
  {
    required sint64 controller_id=1; //XXX ID
    required sint64 object_id=2; //XXX ID
    required int32 property_id=3;
  }
  optional ControllerRemoveProperty controller_remove_property=15;

  //Change the method of controlling a property
  message ControllerPropertySetMethod
  {
    required sint64 controller_id=1; //XXX ID
    required sint64 object_id=2; //XXX ID
    required int32 property_id=3;
    required int32 method=4; //See native RigControllerMethod enum
  }
  optional ControllerPropertySetMethod controller_property_set_method=16;

  message AddView
  {
    required SimpleObject view=1;
  }
  optional AddView add_view=18;

  message DeleteView
  {
    required sint64 view_id=1; //XXX ID
  }
  optional DeleteView delete_view=19;

  message AddBuffer
  {
    required Buffer buffer=1;
  }
  optional AddBuffer add_buffer=21;

  message DeleteBuffer
  {
    required sint64 buffer_id=1; //XXX ID
  }
  optional DeleteBuffer delete_buffer=22;

  message BufferSetData
  {
    required sint64 buffer_id=1; //XXX ID
    required int32 offset=2;
    required bytes data=3;
  }
  optional BufferSetData buffer_set_data=23;

  message MeshSetAttributes
  {
    required sint64 mesh_id=1; //XXX ID
    repeated Attribute attributes=2;
  }
  optional MeshSetAttributes mesh_set_attributes=24;

  //XXX: next id = 25
}

message UIEdit
{
  repeated Operation ops=1;
}

message ObjectRegistration
{
  required sint64 temp_id=1;
  required sint64 real_id=2;
}

message ViewUpdate
{
  required sint64 id=1;
  required uint32 width=2;
  required uint32 height=3;
}

message FrameSetup
{
  repeated Event events=1;

  optional double progress=2;

  repeated ViewUpdate view_updates=3;
}

message LoadResult
{
}

message UIEditResult
{
  optional bool status=1;
}

message DebugConfig
{
  optional bool forward_logs=1; /* whether to forward logs to
                                   slave-master */
}

message DebugConfigAck
{
}

service Slave {
  rpc Edit (UIEdit) returns (UIEditResult);
  rpc Load (UI) returns (LoadResult);
  rpc DebugControl (DebugConfig) returns (DebugConfigAck);
  rpc Test (Query) returns (TestResult);
}

message LogEntry
{
  enum Level { DEBUG=1; INFO=2; MESSAGE=3; WARNING=4; CRITICAL=5; ERROR=6; }

  optional Level log_level = 1;
  optional string log_message = 2;
  optional uint64 timestamp = 3;
}

message Log
{
  enum LogType { FRONTEND=1; SIMULATOR=2; }

  optional LogType type = 1;
  repeated LogEntry entries = 2;
}

message LogAck
{
}

service SlaveMaster {
  rpc ForwardLog (Log) returns (LogAck);
}

message RunFrameAck
{
}

message RegisterInternalAck
{
}

message Sync
{
}

message SyncAck
{
}

// The simulator service as used from the frontend
service Simulator {

  //Note: the simulation is only started by this request.
  //When completed the simulator will issue an UpdateUI request
  rpc RunFrame (FrameSetup) returns (RunFrameAck);

  rpc Test (Query) returns (TestResult);
}

message PropertyChange
{
  optional sint64 object_id=1; //XXX ID
  optional int32 property_id=2;
  optional PropertyValue value=3;
}

message SimulatorAction
{
  //See RigSimulatorActionType
  required uint32 type=1;

  //message SetPlayMode
  //{
  //  required bool enabled=1;
  //}
  //optional SetPlayMode set_play_mode=2;

  message ReportEditFailure
  {
  }
  optional ReportEditFailure report_edit_failure=3;
}

message UIDiff
{
  optional uint64 frame_id=1;
  repeated PropertyChange property_changes=2;

  //batched requests from the simulator to the frontend
  repeated SimulatorAction actions=3;

  repeated sint64 temp_ids=6;

  //UI edits made by application logic
  optional UIEdit edit=4;

  //Set to true if something is animated and we need
  //to run another frame
  optional bool queue_frame=5;
}

message UpdateUIAck
{
}

message FrameRequest
{
}

message FrameRequestAck
{
}

// The frontend service as used from the simulator
service Frontend {
  rpc Load (UI) returns (LoadResult);

  /* The simulator frames are always driven by the frontend but
   * the simulator can request the frontend to run a new frame...
   */
  rpc RequestFrame (FrameRequest) returns (FrameRequestAck);

  rpc UpdateUI (UIDiff) returns (UpdateUIAck);

  rpc ForwardLog (Log) returns (LogAck);

  rpc Test (Query) returns (TestResult);
}
